import telebot
import codecs
import os
import string
import random
from dicrionary import random_char_replacement
from TuringMachine.MGSSnakeEater.SnakeCoder import encode_snake, decode_snake
from TuringMachine.Vigner.VignerCoder import encode_vigner, decode_vigner
from dicrionary import text
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from SquareCore import Square  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Square –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
from SerpentCore import serpent_encrypt, serpent_decrypt  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è Serpent
from KhufuCore import KhufuCore
from KhafreCore import KhafreCore

API_TOKEN = '–Ω–µ—Ç—É —Ç–æ–∫–µ–Ω–∞...'
bot = telebot.TeleBot(API_TOKEN)
user_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
active_cipher = None  # –ê–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞
def generate_random_key(length):
    chars = string.ascii_letters + string.digits  # –ë—É–∫–≤—ã (–≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä) –∏ —Ü–∏—Ñ—Ä—ã
    return ''.join(random.choice(chars) for _ in range(length))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è Serpent –∏ Khufu/Khafre (32 —Å–∏–º–≤–æ–ª–∞)
def generate_random_key_for_serpent():
    return generate_random_key(32)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è Khufu –∏ Khafre (32 —Å–∏–º–≤–æ–ª–∞)
def generate_random_key_for_khufu_khafre():
    return generate_random_key(32)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è Square (16 —Å–∏–º–≤–æ–ª–æ–≤)
def generate_random_key_for_square():
    return generate_random_key(16)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
def process_key_input(message, key_length, generate_random_key_func):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'rand'
    key = message.text.strip()
    if key.lower() == "rand":
        key = generate_random_key_func()
        bot.send_message(message.chat.id, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á: {key}")
    elif len(key) != key_length:
        bot.send_message(message.chat.id, f"–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ {key_length} —Å–∏–º–≤–æ–ª–æ–≤!")
        return None
    return key
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–∞
active_cipher = None

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞–º–∏
guides_folder = r"C:\Users\–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\source\repos\TG_bot_MT\TG_bot_MT\guides"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    show_main_menu(message.chat.id)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def show_main_menu(chat_id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(
        InlineKeyboardButton("üî© Python", callback_data="switch_python"),
        InlineKeyboardButton("üî© C++", callback_data="switch_cpp"),
        InlineKeyboardButton("üîÉ Khufu", callback_data="cipher_khufu"),
        InlineKeyboardButton("üîÉ Khafre", callback_data="cipher_khafre"),
        InlineKeyboardButton("üîÉ Square", callback_data="cipher_square"),
        InlineKeyboardButton("üîÉ Serpent", callback_data="cipher_serpent"),
        InlineKeyboardButton("üßÆ –ú–∞—à–∏–Ω–∞ –¢—å—é—Ä–∏–Ω–≥–∞", callback_data="turing_machine"),
    )
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data in ["switch_python", "switch_cpp"])
def switch_language(call):
    if call.data == "switch_python":
        bot.answer_callback_query(call.id, "‚öôÔ∏è –Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ Python!", show_alert=True)
    elif call.data == "switch_cpp":
        bot.answer_callback_query(call.id, "‚öôÔ∏è –Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ C++!", show_alert=True)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_"))
def handle_back_buttons(call):
    if call.data == "back_to_main":
        show_main_menu(call.message.chat.id)
    elif call.data == "back_to_turing":
        turing_menu(call)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞
@bot.callback_query_handler(func=lambda call: call.data == "turing_machine")
def turing_menu(call):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üîÄ –ó–º–µ–π–∫–∞ (RailFence)", callback_data="turing_snake"),
        InlineKeyboardButton("üîÅ –í–∏–∂–µ–Ω–µ—Ä", callback_data="turing_vigner"),
        InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="cipher_infoT"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞:", call.message.chat.id, call.message.message_id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
@bot.callback_query_handler(func=lambda call: call.data == "cipher_infoT")
def send_documentation(call):
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_path = "guides\–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∫ –º–∞—à–∏–Ω–µ –¢—å—é—Ä–∏–Ω–≥–∞.docx"  # –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        with open(doc_path, "rb") as doc:
            bot.send_document(call.message.chat.id, doc)
    except FileNotFoundError:
        bot.send_message(call.message.chat.id, "–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∑–º–µ–π–∫–∏ –∏–ª–∏ –≤–∏–∂–µ–Ω–µ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data in ["turing_snake", "turing_vigner"])
def turing_method_selection(call):
    global active_cipher
    active_cipher = call.data

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üîí –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å", callback_data="turing_encode"),
        InlineKeyboardButton("üîì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å", callback_data="turing_decode"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_turing")
    )
    bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id, call.message.message_id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data in ["turing_encode", "turing_decode"])
def turing_action_selection(call):
    action = call.data
    if action == "turing_encode":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_turing_text, action="encode")
    elif action == "turing_decode":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_turing_text, action="decode")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
def process_turing_text(message, action):
    user_data[message.chat.id] = {'text': message.text}
    
    if active_cipher == "turing_snake":
        if action == "encode":
            encrypted_text, rail_lengths = encode_snake(message.text)
            bot.send_message(message.chat.id, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ó–º–µ–π–∫–∞): {encrypted_text}\n–î–ª–∏–Ω—ã —Ä–µ–ª—å—Å: {rail_lengths}")
        elif action == "decode":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—ã —Ä–µ–ª—å—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
            bot.register_next_step_handler(msg, process_snake_decryption, text=message.text)
    
    elif active_cipher == "turing_vigner":
        if action == "encode":
            encrypted_text, key = encode_vigner(message.text)
            bot.send_message(message.chat.id, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–í–∏–∂–µ–Ω–µ—Ä): {encrypted_text}\n–ö–ª—é—á: {key}")
        elif action == "decode":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
            bot.register_next_step_handler(msg, process_vigner_decryption, text=message.text)

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ –ó–º–µ–π–∫–∞
def process_snake_decryption(message, text):
    try:
        rail_lengths = list(map(int, message.text.split()))
        if len(rail_lengths) != 2:
            raise ValueError("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–µ –¥–ª–∏–Ω—ã —Ä–µ–ª—å—Å–æ–≤.")
        decrypted_text = decode_snake(text, rail_lengths)
        bot.send_message(message.chat.id, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ó–º–µ–π–∫–∞): {decrypted_text}")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ –í–∏–∂–µ–Ω–µ—Ä
def process_vigner_decryption(message, text):
    try:
        key = message.text
        decrypted_text = decode_vigner(text, key)
        bot.send_message(message.chat.id, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–í–∏–∂–µ–Ω–µ—Ä): {decrypted_text}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def show_cipher_menu(chat_id, message_id):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üîí –®–∏—Ñ—Ä–æ–≤–∞—Ç—å", callback_data="encrypt"),
        InlineKeyboardButton("üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", callback_data="decrypt"),
        InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="cipher_info"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∏—Ñ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("cipher_") and call.data != "cipher_info")
def cipher_selection(call):
    global active_cipher
    cipher_map = {
        "cipher_khufu": "Khufu",
        "cipher_khafre": "Khafre",
        "cipher_square": "Square",
        "cipher_serpent": "Serpent"
    }
    active_cipher = cipher_map[call.data]
    bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º {active_cipher}!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üîí –®–∏—Ñ—Ä–æ–≤–∞—Ç—å", callback_data="encrypt"),
        InlineKeyboardButton("üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", callback_data="decrypt"),
        InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="cipher_info"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@bot.callback_query_handler(func=lambda call: call.data == "cipher_info")
def cipher_info(call):
    send_guide_file(call.message.chat.id, active_cipher)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "encrypt")
def encrypt_message(call):
    if active_cipher == "Khufu":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_khufu_encryption_text)
    if active_cipher == "Square":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_encryption_text)
    elif active_cipher == "Serpent":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_serpent_encryption_text)
    elif active_cipher == "Khafre":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_khafre_encryption_text)
    else:
        bot.answer_callback_query(call.id, "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è Khufu, Khafre, Serpent –∏ Square!", show_alert=False)

def process_khufu_encryption_text(message):
    user_data[message.chat.id] = {'text': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (32 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ 'rand' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞:")
    bot.register_next_step_handler(msg, process_khufu_encryption_key)

def process_khufu_encryption_key(message):
    try:
        key = process_key_input(message, 32, generate_random_key_for_khufu_khafre)
        if not key:
            return
        
        khufu = KhufuCore(key)
        encrypted_text = khufu.encrypt(user_data[message.chat.id]['text'])
        bot.send_message(message.chat.id, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Khufu): {encrypted_text}")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))

def process_khafre_encryption_text(message):
    user_data[message.chat.id] = {'text': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (32 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ 'rand' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞:")
    bot.register_next_step_handler(msg, process_khafre_encryption_key)

def process_khafre_encryption_key(message):
    try:
        key = process_key_input(message, 32, generate_random_key_for_khufu_khafre)
        if not key:
            return
        
        khafre = KhafreCore(key)
        encrypted_text = khafre.encrypt(user_data[message.chat.id]['text'])
        bot.send_message(message.chat.id, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Khafre): {encrypted_text}")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Khufu
@bot.callback_query_handler(func=lambda call: call.data == "decrypt" and active_cipher == "Khufu")
def decrypt_khufu_message(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_khufu_decryption_text)

def process_khufu_decryption_text(message):
    user_data[message.chat.id] = {'text': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (32 —Å–∏–º–≤–æ–ª–∞):")
    bot.register_next_step_handler(msg, process_khufu_decryption_key)

def process_khufu_decryption_key(message):
    try:
        key = message.text.strip()
        if len(key) != 32:
            raise ValueError("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 32 —Å–∏–º–≤–æ–ª–∞!")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä KhufuCore
        khufu = KhufuCore(key)
        decrypted_text = khufu.decrypt(user_data[message.chat.id]['text'])
        bot.send_message(message.chat.id, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Khufu): {decrypted_text}")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Khafre
@bot.callback_query_handler(func=lambda call: call.data == "decrypt" and active_cipher == "Khafre")
def decrypt_khafre_message(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_khafre_decryption_text)

def process_khafre_decryption_text(message):
    user_data[message.chat.id] = {'text': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (32 —Å–∏–º–≤–æ–ª–∞):")
    bot.register_next_step_handler(msg, process_khafre_decryption_key)

def process_khafre_decryption_key(message):
    try:
        key = message.text.strip()
        if len(key) != 32:
            raise ValueError("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 32 —Å–∏–º–≤–æ–ª–∞!")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä KhafreCore
        khafre = KhafreCore(key)
        decrypted_text = khafre.decrypt(user_data[message.chat.id]['text'])
        bot.send_message(message.chat.id, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Khafre): {decrypted_text}")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))

def process_encryption_text(message):
    user_data[message.chat.id] = {'text': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (16 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ 'rand' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞:")
    bot.register_next_step_handler(msg, process_encryption_key)

def process_encryption_key(message):
    try:
        key = process_key_input(message, 16, generate_random_key_for_square)
        if not key:
            return
        
        text = user_data[message.chat.id]['text']
        
        if active_cipher == "Square":
            cipher = Square()
            encrypted_text = cipher.Encryption(text, key)
        
        bot.send_message(message.chat.id, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤ hex): {encrypted_text.hex()}")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Square
def process_square_decryption_text(message):
    try:
        # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ hex
        encrypted_text_hex = message.text.strip()
        encrypted_text_bytes = bytes.fromhex(encrypted_text_hex)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º hex –≤ –±–∞–π—Ç—ã
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.chat.id] = {'encrypted_text_bytes': encrypted_text_bytes}
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª—é—á
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (16 —Å–∏–º–≤–æ–ª–æ–≤):")
        bot.register_next_step_handler(msg, process_square_decryption_key)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

def process_square_decryption_key(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
        key = message.text.strip()
        if len(key) != 16:
            raise ValueError("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 16 —Å–∏–º–≤–æ–ª–æ–≤!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ user_data
        if message.chat.id not in user_data or 'encrypted_text_bytes' not in user_data[message.chat.id]:
            raise ValueError("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã
        encrypted_text_bytes = user_data[message.chat.id]['encrypted_text_bytes']
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Square
        cipher = Square()
        decrypted_bytes = cipher.Decryption(encrypted_text_bytes, key)

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–ª—é—á–µ
        codecs.register_error("random_replace", random_char_replacement)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è—è –Ω—É–ª–µ–≤—ã–µ –±–∞–π—Ç—ã
        decrypted_text = decrypted_bytes.rstrip(b'\x00').decode('utf-8', errors='random_replace')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {decrypted_text}")
    except ValueError as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    except UnicodeDecodeError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è Serpent
# –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞ Serpent
@bot.callback_query_handler(func=lambda call: call.data == "decrypt")
def decrypt_message(call):
    if active_cipher == "Serpent":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤ hex —Ñ–æ—Ä–º–∞—Ç–µ):")
        bot.register_next_step_handler(msg, process_serpent_decryption_text)
    elif active_cipher == "Square":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤ hex —Ñ–æ—Ä–º–∞—Ç–µ):")
        bot.register_next_step_handler(msg, process_square_decryption_text)
    else:
        bot.answer_callback_query(call.id, f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è {active_cipher}!", show_alert=True)

def process_serpent_encryption_text(message):
    user_data[message.chat.id] = {'text': message.text}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (32 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ 'rand' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞:")
    bot.register_next_step_handler(msg, process_serpent_encryption_key)

def process_serpent_encryption_key(message):
    try:
        key = process_key_input(message, 32, generate_random_key_for_serpent)
        if not key:
            return
        
        key = key.encode()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ –±–∞–π—Ç—ã
        text = user_data[message.chat.id]['text'].encode('utf-8')
        
        encrypted_text = serpent_encrypt(text, key)
        bot.send_message(message.chat.id, f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–≤ hex): {encrypted_text.hex()}")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è Serpent
def process_serpent_decryption_text(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
        encrypted_text_hex = message.text.strip()
        encrypted_text_bytes = bytes.fromhex(encrypted_text_hex)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º hex –≤ –±–∞–π—Ç—ã

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[message.chat.id] = {'encrypted_text_bytes':encrypted_text_bytes}

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (32 —Å–∏–º–≤–æ–ª–∞):")
        bot.register_next_step_handler(msg, process_serpent_decryption_key)
    except ValueError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è Serpent
def process_serpent_decryption_key(message):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ –±–∞–π—Ç—ã
        key = message.text.encode()  
        if len(key) != 32:  # –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32 –±–∞–π—Ç–∞ (256 –±–∏—Ç)
            raise ValueError("–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 32 —Å–∏–º–≤–æ–ª–∞!")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        encrypted_text_bytes = user_data[message.chat.id]['encrypted_text_bytes']

        # –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Serpent
        decrypted_text = serpent_decrypt(encrypted_text_bytes, key)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ ‚Äî —ç—Ç–æ –±–∞–π—Ç—ã
        if isinstance(decrypted_text, bytes):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É UTF-8
                decrypted_text_str = decrypted_text.decode('utf-8', errors='ignore')  
                if not decrypted_text_str:
                    decrypted_text_str = f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç. –í–æ—Ç –±–∞–π—Ç—ã: {decrypted_text.hex()}"
            except UnicodeDecodeError:
                decrypted_text_str = f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã: {decrypted_text.hex()}"
        else:
            decrypted_text_str = decrypted_text  # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –µ—ë

        bot.send_message(message.chat.id, f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {decrypted_text_str}")

    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
    except UnicodeDecodeError:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


def send_guide_file(chat_id, cipher):
    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–∞
    file_name_user = f"{cipher}_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.docx"
    file_name_dev = f"{cipher}_—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.docx"
    
    # –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    file_path_user = os.path.join(guides_folder, file_name_user)
    file_path_dev = os.path.join(guides_folder, file_name_dev)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if os.path.exists(file_path_user) and os.path.exists(file_path_dev):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with open(file_path_user, 'rb') as file:
            bot.send_document(chat_id, file, caption=f"–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ {cipher}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        with open(file_path_dev, 'rb') as file:
            bot.send_document(chat_id, file, caption=f"–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ {cipher}")
    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∏—Ñ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=['document'])
def handle_document(message):
    if active_cipher is None:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
    file_path = os.path.join("temp", message.document.file_name)
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    with open(file_path, 'r', encoding='utf-8') as file:
        text = file.read()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    user_data[message.chat.id] = {'text': text, 'file_path': file_path}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üîí –®–∏—Ñ—Ä–æ–≤–∞—Ç—å", callback_data="encrypt_file"),
        InlineKeyboardButton("üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", callback_data="decrypt_file")
    )
    bot.send_message(message.chat.id, "–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@bot.callback_query_handler(func=lambda call: call.data == "encrypt_file")
def encrypt_file(call):
    chat_id = call.message.chat.id
    text = user_data[chat_id]['text']
    file_path = user_data[chat_id]['file_path']

    try:
        # –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'rand' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞):")
        bot.register_next_step_handler(msg, process_file_encryption, text=text, file_path=file_path)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å –∫–ª—é—á–æ–º
def process_file_encryption(message, text, file_path):
    chat_id = message.chat.id
    user_key = message.text.strip()

    try:
        # –ï—Å–ª–∏ –∫–ª—é—á "rand" - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
        if user_key.lower() == "rand":
            if active_cipher == "Serpent":
                key = generate_random_key_for_serpent()
            elif active_cipher in ["Khufu", "Khafre"]:
                key = generate_random_key_for_serpent()  # –î–ª—è Khufu –∏ Khafre –∏—Å–ø–æ–ª—å–∑—É–µ–º 32 —Å–∏–º–≤–æ–ª–∞
            elif active_cipher == "Square":
                key = generate_random_key_for_square()
        else:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª—é—á
            if active_cipher in ["Khufu", "Khafre"]:
                key = user_key  # –°—Ç—Ä–æ–∫–∞ –∏–∑ 32 —Å–∏–º–≤–æ–ª–æ–≤
            elif active_cipher == "Serpent":
                key = user_key  # –°—Ç—Ä–æ–∫–∞ –∏–∑ 32 —Å–∏–º–≤–æ–ª–æ–≤
            elif active_cipher == "Square":
                key = user_key  # –°—Ç—Ä–æ–∫–∞ –∏–∑ 16 —Å–∏–º–≤–æ–ª–æ–≤

        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á: {key}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(key)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        if active_cipher == "Khufu":
            cipher = KhufuCore(key)
            encrypted_text = cipher.encrypt(text)
        elif active_cipher == "Khafre":
            cipher = KhafreCore(key)
            encrypted_text = cipher.encrypt(text)
        elif active_cipher == "Serpent":
            encrypted_text = serpent_encrypt(text.encode('utf-8'), key.encode('utf-8'))
        elif active_cipher == "Square":
            cipher = Square()
            encrypted_text = cipher.Encryption(text, key)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
        result_file = file_path.replace('.txt', f'_{active_cipher}_—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π.txt')
        with open(result_file, 'w', encoding='utf-8') as file:
            file.write(encrypted_text.hex() if isinstance(encrypted_text, bytes) else encrypted_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with open(result_file, 'rb') as file:
            bot.send_document(chat_id, file, caption=f"–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª. –ú–µ—Ç–æ–¥: {active_cipher}\n–ö–ª—é—á: {key}")

    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "decrypt_file")
def decrypt_file(call):
    chat_id = call.message.chat.id
    text = user_data[chat_id]['text']
    file_path = user_data[chat_id]['file_path']

    try:
        # –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–∞ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(msg, process_file_decryption, text=text, file_path=file_path)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–ª—é—á–∞ –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

def process_file_decryption(message, text, file_path):
    try:
        key = message.text.strip()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
        print(f"–ü–æ–ª—É—á–µ–Ω –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {key}")
        print(f"–¢–µ–∫—Å—Ç –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {text[:50]}...")  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        if active_cipher == "Khufu":
            # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Khufu
            try:
                cipher = KhufuCore(key)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
                decrypted_text = cipher.decrypt(text)
            except ValueError as e:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. {str(e)}")
                return
        elif active_cipher == "Khafre":
            # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Khafre
            try:
                cipher = KhafreCore(key)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∫–ª—é—á
                decrypted_text = cipher.decrypt(text)
            except ValueError as e:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. {str(e)}")
                return
        elif active_cipher == "Serpent":
            # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Serpent
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –≤ –±–∞–π—Ç—ã (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
                key_bytes = message.text.encode('utf-8')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –±–∞–π—Ç—ã UTF-8

                decrypted_bytes = bytes.fromhex(text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±–∞–π—Ç—ã
                decrypted_data = serpent_decrypt(decrypted_bytes, key_bytes)

                if isinstance(decrypted_data, bytes):
                    try:
                        decrypted_text = decrypted_data.decode('utf-8')  # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    except UnicodeDecodeError:
                        decrypted_text = decrypted_data.hex()  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ HEX
                else:
                    decrypted_text = decrypted_data
            except ValueError:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.")
                return
        elif active_cipher == "Square":
            # –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ Square
            try:
                cipher = Square()
                codecs.register_error("random_replace", random_char_replacement)
                decrypted_text = cipher.Decryption(bytes.fromhex(text), key).decode('utf-8', errors = 'random_replace')
            except Exception as e:
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–º Square: {str(e)}")
                return

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        print(f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {decrypted_text[:50]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª
        result_file = file_path.replace('.txt', f'_{active_cipher}_–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π.txt')
        with open(result_file, 'w', encoding='utf-8') as file:
            file.write(decrypted_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        with open(result_file, 'rb') as file:
            bot.send_document(message.chat.id, file, caption=f"–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª. –ú–µ—Ç–æ–¥: {active_cipher}")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

        
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)